#!/usr/bin/env python3
# -*-Python-*-

import argparse
import os
import pathlib
import subprocess

parser = argparse.ArgumentParser(description="Clone a Gihub repo in the right directory. Set up easy jump points too.")
parser.add_argument("repo", metavar="repo", type=str,
                    help="Github repo link with {username}/{repo name} as format (e.g. torvalds/linux)")
parser.add_argument("--shallow", dest="shallow", action="store_true", default=False,
                    help="When specified, clone the repo with depth=1.")

home_path = pathlib.Path(os.path.expanduser("~"))
src_path = home_path / "src"


def extract_repo_and_username(repostr):
    return os.path.split(repostr)


def get_github_path(username):
    srcpath = pathlib.Path(os.environ.get("SRC") or src_path.as_posix() or os.getcwd())
    github_username_path = srcpath / "github.com" / username
    return github_username_path


def ensure_dir(path):
    try:
        path.mkdir(parents=True)
    except FileExistsError:
        pass


def clone_repo(username, repo, shallow):
    clone_url = "git@github.com:{username}/{repo}.git".format(username=username,
                                                              repo=repo)
    github_path = get_github_path(username)
    repo_path = github_path / repo
    shallow_arg = "--depth 1" if shallow else ""
    command = "git clone {clone_url} {repo_path} {shallow_arg}".format(clone_url=clone_url,
                                                                             repo_path=repo_path,
                                                                             shallow_arg=shallow_arg)
    print("Running command {}".format(command))
    subprocess.call(command, shell=True)
    return repo_path


def set_marks(repo_path):
    repo = repo_path.name

    marks_path = home_path / "marks"
    if not marks_path.exists():
        return

    repo_mark_path = marks_path / repo
    os.symlink(repo_path.as_posix(), repo_mark_path.as_posix())


def main(repostr, shallow):
    username, repo = extract_repo_and_username(repostr)
    github_username_path = get_github_path(username)

    # create the github username path first, if it doesn't exist
    ensure_dir(github_username_path)
    repo_path = clone_repo(username, repo, shallow)
    set_marks(repo_path)




if __name__ == '__main__':
    args = parser.parse_args()
    main(repostr=args.repo, shallow=args.shallow)
