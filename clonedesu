#!/usr/bin/env python3
# -*-Python-*-

import argparse
import os
import pathlib
import subprocess

parser = argparse.ArgumentParser(description="Clone a Gihub repo in the right directory. Set up easy jump points too.")
parser.add_argument("repo", metavar="repo", type=str,
                    help="""Github repo link with {username}/{repo name} as format
                    (e.g. torvalds/linux).""")
parser.add_argument("--branch", metavar="branch", default="master",
                    help="Branch to check out. Defaults to master.")
parser.add_argument("--shallow", dest="shallow", action="store_true", default=False,
                    help="When specified, clone the repo with depth=1.")
parser.add_argument("--gdbsource", dest="is_source", action="store_true", default=False,
                    help='''When specified, the repo to be cloned is treated as a source of
                    special interest, and placed in a directory along
                    with other special interest repos. Useful for GDB
                    debugging.''')

home_path = pathlib.Path(os.path.expanduser("~"))
src_path = home_path / "src"
gdb_src_path = src_path / "lib"


def extract_repo_and_username(repostr):
    return os.path.split(repostr)


def get_github_path(username):
    srcpath = pathlib.Path(os.environ.get("SRC") or src_path.as_posix() or os.getcwd())
    github_username_path = srcpath / "github.com" / username
    return github_username_path


def ensure_dir(path):
    try:
        path.mkdir(parents=True)
    except FileExistsError:
        pass


def clone_repo_for_dev(username, repo, shallow, branch):
    clone_url = "git@github.com:{username}/{repo}.git".format(username=username,
                                                              repo=repo)
    github_path = get_github_path(username)
    repo_path = github_path / repo
    command_template = "git clone {clone_url} {repo_path} {shallow_arg} {branch_arg}"
    shallow_arg = "--depth 1" if shallow else ""
    branch_arg = "--branch {}".format(branch)
    command = command_template.format(clone_url=clone_url,
                                      repo_path=repo_path,
                                      shallow_arg=shallow_arg,
                                      branch_arg=branch_arg)
    print("Running command {}".format(command))
    subprocess.call(command, shell=True)
    return repo_path


def clone_repo_for_gdb(username, repo, branch):
    clone_url = "git@github.com:{username}/{repo}.git".format(username=username,
                                                              repo=repo)
    repo_path = gdb_src_path / repo
    command_template = "git clone {clone_url} {repo_path} {branch_arg} --depth 1"
    branch_arg = "--branch {}".format(branch)

    command = command_template.format(clone_url=clone_url,
                                      repo_path=repo_path,
                                      branch_arg=branch_arg)
    print("Running command {}".format(command))
    subprocess.call(command, shell=True)
    return repo_path


def set_marks(repo_path):
    repo = repo_path.name

    marks_path = home_path / "marks"
    if not marks_path.exists():
        return

    repo_mark_path = marks_path / repo
    os.symlink(repo_path.as_posix(), repo_mark_path.as_posix())


def add_repo_to_gdb_source_path(path):
    gdbinit_path = os.path.expanduser("~/.gdbinit")
    with open(gdbinit_path, "a") as f:
        f.write("dir {}\n".format(path))

        # add the repo's .git path as well, in case we have .. in dbg
        # symbols
        repo_git_path = path / ".git"
        f.write("dir {}\n".format(repo_git_path))


def generate_tags(path):
    os.chdir(path)
    subprocess.call("ctags -R -e .", shell=True)


def main(repostr, shallow, branch, gdbsource):
    username, repo = extract_repo_and_username(repostr)
    github_username_path = get_github_path(username)

    # create the paths where we store repos
    ensure_dir(github_username_path)
    ensure_dir(gdb_src_path)

    if gdbsource:
        repo_path = clone_repo_for_gdb(username, repo, branch)
        add_repo_to_gdb_source_path(repo_path)
    else:
        repo_path = clone_repo_for_dev(username, repo, shallow, branch)

    generate_tags(repo_path)
    set_marks(repo_path)


if __name__ == '__main__':
    args = parser.parse_args()
    main(repostr=args.repo,
         shallow=args.shallow,
         branch=args.branch,
         gdbsource=args.is_source)
